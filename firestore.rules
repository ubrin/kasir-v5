rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check for any authenticated user
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check ownership
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Admins can read and write anything
    match /{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Stats are public read-only for all users
    match /app-stats/summary {
      allow get: if isAuthenticated();
      allow list, create, update, delete: if false;
    }
    
    // Users can read their own profile
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list, create, update, delete: if false; // Users can't change their own role or create users
    }
    
    // Authenticated users can read collectors data
    match /collectors/{collectorId} {
        allow get: if isAuthenticated();
        allow list: if isAuthenticated();
        // create, update, delete is admin-only via the /{document=**} rule
    }

    // Authenticated users can read/write data relevant to their function
    match /customers/{customerId} {
      allow read, write: if isAuthenticated();
    }

    match /invoices/{invoiceId} {
      allow read, write: if isAuthenticated();
    }

    match /payments/{paymentId} {
      allow read, write: if isAuthenticated();
    }
    
     match /expenses/{expenseId} {
      allow read, write: if isAuthenticated();
    }
    
     match /otherIncomes/{incomeId} {
      allow read, write: if isAuthenticated();
    }
  }
}
